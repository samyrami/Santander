#!/usr/bin/env python3
"""
Script para probar espec√≠ficamente consultas sobre la Secretar√≠a de Educaci√≥n
"""
import asyncio
import logging
from santander_knowledge import knowledge_manager

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_education_specific():
    """
    Prueba consultas espec√≠ficas sobre educaci√≥n como las que har√≠a un usuario
    """
    print("üéì Probando consultas espec√≠ficas sobre Secretar√≠a de Educaci√≥n...")
    
    # Consultas que podr√≠an hacer los usuarios
    user_queries = [
        "¬øCu√°les son los indicadores completados de la Secretar√≠a de Educaci√≥n?",
        "¬øQu√© indicadores ha logrado la Secretar√≠a de Educaci√≥n?",
        "Dime sobre los avances de la Secretar√≠a de Educaci√≥n",
        "¬øCu√°ntos indicadores tiene completados educaci√≥n?",
        "Secretar√≠a de Educaci√≥n indicadores completados",
        "educaci√≥n 46.8% que indicadores complet√≥",
    ]
    
    print(f"\nüß™ Probando {len(user_queries)} consultas realistas:")
    
    for i, query in enumerate(user_queries, 1):
        print(f"\n{'='*60}")
        print(f"CONSULTA {i}: '{query}'")
        print('='*60)
        
        try:
            # Simular detecci√≥n de palabras clave
            query_lower = query.lower()
            indicator_keywords = ['indicador', 'meta', 'avance', 'progreso', 'resultado', 'ejecuci√≥n', 'cumplimiento', 'secretar√≠a', 'dependencia', 'educaci√≥n', 'salud', 'tic', 'infraestructura', 'planeaci√≥n', 'completado', 'completados', 'logrado', 'alcanzado']
            is_indicator_query = any(keyword in query_lower for keyword in indicator_keywords)
            
            print(f"üìù Detecci√≥n de consulta de indicadores: {'‚úÖ S√ç' if is_indicator_query else '‚ùå NO'}")
            if is_indicator_query:
                detected = [k for k in indicator_keywords if k in query_lower]
                print(f"   Palabras detectadas: {detected}")
            
            # Buscar contexto
            context = await knowledge_manager.get_context_for_query(query)
            
            print(f"üîç Contexto encontrado: {'‚úÖ S√ç' if context.strip() else '‚ùå NO'} ({len(context)} caracteres)")
            
            if context.strip():
                # Mostrar extractos relevantes del contexto
                lines = context.split('\n')
                relevant_lines = [line for line in lines if 'educaci√≥n' in line.lower() or 'indicador' in line.lower()][:5]
                if relevant_lines:
                    print("üìä Extractos relevantes del contexto:")
                    for line in relevant_lines:
                        if line.strip():
                            print(f"   ‚Ä¢ {line[:120]}...")
                
                # Datos de referencia r√°pida que se a√±adir√≠an
                if is_indicator_query:
                    print("üéØ Datos de referencia r√°pida que se incluir√≠an:")
                    print("   ‚Ä¢ Secretar√≠a de Educaci√≥n: 46.8% avance f√≠sico, 94.8% ejecuci√≥n presupuestal")
                    print("   ‚Ä¢ 21 indicadores totales, 8 completados")
                    
            # Respuesta completa con fuentes
            response = await knowledge_manager.answer_with_sources(query)
            print(f"üìë Fuentes oficiales encontradas: {response['found_sources']}")
            
            if response['found_sources'] > 0:
                print("üìÑ Documentos que contienen informaci√≥n relevante:")
                for result in response['raw_results'][:3]:  # Mostrar top 3
                    source = result['metadata']['source']
                    page = result['metadata'].get('page', 'N/A')
                    relevance = result['relevance_score']
                    print(f"   ‚Ä¢ {source} (P√°gina {page}) - Relevancia: {relevance:.1%}")
                    
        except Exception as e:
            print(f"‚ùå Error en consulta: {e}")
            logger.exception("Error procesando consulta")
    
    print(f"\n{'='*60}")
    print("‚úÖ An√°lisis completado")
    print("üîß RECOMENDACIONES:")
    print("   1. La base vectorial S√ç tiene informaci√≥n sobre educaci√≥n")
    print("   2. Las palabras clave detectan correctamente las consultas")
    print("   3. El problema puede estar en c√≥mo el agente procesa la respuesta final")
    print("   4. Los datos de referencia r√°pida deber√≠an proporcionar informaci√≥n b√°sica")

if __name__ == "__main__":
    asyncio.run(test_education_specific())
